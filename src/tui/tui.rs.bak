use chrono::{Local, Duration};
use cursive::{
    Cursive                                   ,
    traits::*                                 ,
    align::Align                              ,
    event::{self,Key, EventResult, Event}     ,
    theme::{Style, Effect}                    ,
    views::{
        LinearLayout, Panel     , Dialog      , 
        EditView    , DummyView , TextView    ,
        ResizedView , SelectView, OnEventView ,
    }, CursiveExt                                         ,
};

use crate::{
    storage::db_handler::DbHandler          ,
    common::{
        card::{Card, CardStatus, Difficulty},
        deck::Deck                          ,
        decks::Decks                        ,
        study::ReviewSystem                 ,
    }                                       ,
};

type StudyCard = ResizedView<ResizedView<Panel<LinearLayout>>>;

#[derive(Debug, Clone)]
pub enum Mode 
{
    Insert,
    Normal,
}

#[derive(Debug, Clone)]
pub enum Screen 
{
    Home      ,
    Study     ,
    Difficulty,
}

pub struct App
{
    pub mode:          Mode                ,
    pub screen:        Screen              ,
    pub decks:         Decks               ,
    pub db:            DbHandler           ,
    pub review_system: Option<ReviewSystem>,
    // The should probably just come from review_system
    pub current_card:  Option<Card>        ,
    pub current_deck:  Option<Deck>        ,
    // Decks
}
// Create functions that pull from the review system and make life easier.

impl App 
{
    pub fn new() -> Self 
    {
        let db = DbHandler::new("./test");

        Self {
            mode:          Mode::Normal  ,
            screen:        Screen::Home  ,
            decks:         db.get_decks(),
            db:            DbHandler::new("./test"),
            review_system: None          ,
            current_card:  None          ,
            current_deck:  None          ,
        }
    }
    pub fn run() {
        let mut siv = cursive::default();
        let app     = App::new();

        siv.set_user_data(app);
        set_initial_callbacks(&mut siv);

        // siv.add_layer(home_page(&mut siv));
        let home_page = home_page(&mut siv);
        siv.add_layer(home_page);

        siv.run();
    }
}


fn home_page(s: &mut Cursive) -> LinearLayout
{
    s.with_user_data(|app: &mut App| app.screen = Screen::Home);
    match s.pop_layer() 
    {
        Some(_) => {},
        None    => {},
    }

    // Make these traits or something
    let bold           = Style::from(Effect::Bold);
    let underline      = Style::from(Effect::Underline);
    let bold_underline = Style::merge(&[bold,underline]);

    let decks      = s.with_user_data(|app : &mut App| app.decks.list_decks()).unwrap();
    let deck_names = decks.iter().map(|d| d.get_name());

    let mut decks: SelectView<String> = SelectView::new()
        .align(Align::center_left())
        .on_submit(|s,deck_name: &str| { 
            let deck: Deck = s.with_user_data(|app: &mut App| {
                return app.decks.get_deck(&deck_name).unwrap();
            }).unwrap();

            s.with_user_data(|app: &mut App| app.current_deck = Some(deck.to_owned()));
            let current_card = get_current_card(s, &deck);

            match current_card.as_ref()
            {
                Some(card) => {
                    // Simple display the current card to the user
                    let study_page = get_study_card(s, card.to_owned());
                    // TODO: Need to implement the study logic here in order to get next card?
                    // s.with_user_data(|app: &mut App| app.review_system.unwrap().study_cards.pop()).unwrap();
                    s.add_layer(study_page);
                    s.screen_mut().add_transparent_layer(DummyView);
                },
                // Go home
                None => 
                {
                    let no_cards = Dialog::new()
                        .content(TextView::new("No cards to study!"))
                        .title("Whoops!");
                    let no_cards = OnEventView::new(no_cards)
                        .on_event( Key::Esc  , pop_layer )
                        .on_event( Key::Enter, pop_layer );

                    fn pop_layer(siv: &mut Cursive) { siv.pop_layer(); }

                    s.add_layer(no_cards);
                }
            }
        });

    for value in deck_names
    {
        decks.add_item(value.to_string(), value.to_string());
    }

    let decks = OnEventView::new(decks)
                    .on_pre_event_inner( 'k', move_up  )
                    .on_pre_event_inner( 'j', move_down);

    fn move_up(select_view: &mut SelectView, _: &Event) -> Option<EventResult>
    {
        let cb = select_view.select_up(1);
        Some(EventResult::Consumed(Some(cb)))
    }
    fn move_down(select_view: &mut SelectView, _: &Event) -> Option<EventResult>
    {
        let cb = select_view.select_down(1);
        Some(EventResult::Consumed(Some(cb)))
    }

    let home_page = LinearLayout::vertical()
        .child(Panel::new(
            Panel::new(LinearLayout::vertical()
                .child(TextView::new("Decks").style(bold_underline).align(Align::center()))
                .child(DummyView)
                .child(decks.scrollable())
        )
        // .title("home")
        .min_width(30)
        .min_height(5)
        .max_height(20)
        .scrollable()
        )
        .title("HOME")
        .with_name("home")
        );

    return home_page;
}

fn get_study_card(siv: &mut Cursive, card: Card) -> StudyCard
{
    siv.with_user_data(| app: &mut App| app.screen = Screen::Study);

    let answer_box = EditView::new()
        .on_submit(submit_answer)
        .with_name("answer") ;

    let back_door = Dialog::new()
                           .content(answer_box)
                           .padding_top(1)
                           .min_height(5);

    let front_door = Dialog::new()
                    .content(
                        TextView::new(card.get_front())
                            .align(Align::center())
                            .with_name("question"))
                    .min_height(5);

    let study_card = Panel::new(LinearLayout::vertical()
            .child( DummyView )
            .child( front_door)
            .child( DummyView )
            .child( back_door )
            )
            .title("Study")
            .min_width(50)
            .min_height(15);
    return study_card;
}

fn get_difficulty_window(s: &mut Cursive) -> StudyCard
{
    s.with_user_data(|app: &mut App| {app.screen = Screen::Difficulty});
    let select_view= SelectView::new() 
        .item("Easy", Difficulty::Easy)
        .item("Ok", Difficulty::Normal)
        .item("Hard", Difficulty::Hard)
        .selected(1)
        .align(Align::bot_center())
        .with_name("difficulty");

    let select_view = OnEventView::new(select_view)
        .on_pre_event_inner('k', |d,_| 
                        {
                            let cb = d.get_mut().select_up(1);
                            Some(EventResult::Consumed(Some(cb)))
                        })
        .on_pre_event_inner('j', |d,_|
                        {
                            let cb = d.get_mut().select_down(1);
                            Some(EventResult::Consumed(Some(cb)))
                        }) ;

    let select_view = LinearLayout::vertical()
        .child(TextView::new("Difficulty").align(Align::bot_center()))
        .child(DummyView)
        .child(select_view) ;

    let difficulty_screen = Panel::new(select_view)
        .min_width(30)
        .max_height(20) ;

    return difficulty_screen;

}


fn get_current_card(s: &mut Cursive, deck: &Deck) -> Option<Card>
{
    s.with_user_data(|app: &mut App| app.db = DbHandler::new("./test")).unwrap();
    let mut storage = s.with_user_data(|app: &mut App| app.db.to_owned()).unwrap();
    storage.sync_decks();
    let mut rs = ReviewSystem::new(&deck, &storage);

    rs.generate_study_deck();
    s.with_user_data(|app: &mut App| app.review_system = Some(rs.to_owned()));
    let rs = s.with_user_data(|app: &mut App| app.review_system.to_owned()).unwrap();

    let current_card = rs.unwrap().get_current_card();
    s.with_user_data(|app: &mut App| {app.current_card = current_card.to_owned();});
    return current_card;
}

fn set_initial_callbacks(siv: &mut Cursive) 
{
    siv.add_global_callback('q', |s| s.quit());
    siv.add_global_callback(Key::Backspace, |s| {
        let screen = s.with_user_data(|app: &mut App| app.screen.to_owned()).unwrap();

        match screen 
        {
            Screen::Home  => return      ,
            Screen::Study =>
            {
                s.pop_layer().unwrap();
                s.pop_layer().unwrap();
                return;
            }                            ,
            other         => 
            {
                s.pop_layer().unwrap();
                return;
            }                            ,
        }
    });
    siv.add_global_callback(event::Key::Esc, |s| {
        let screen  = s.with_user_data(|app: &mut App |{ return app.screen.to_owned() });
        let mode    = s.with_user_data(|app: &mut App| { return app.mode.to_owned()   });
        match screen.unwrap() 
        {
            Screen::Home => return,
            other        => {}    ,
        }
        match mode.unwrap()
        {
            Mode::Insert => 
            {
                s.screen_mut().add_transparent_layer(DummyView);
                s.with_user_data(|app: &mut App| app.mode = Mode::Normal);
            }                                                               ,
            Mode::Normal => {}                                              ,
        }
    });

    siv.add_global_callback('i', |s| {
        let screen  = s.with_user_data(|app: &mut App |{ return app.screen.to_owned() });
        let mode    = s.with_user_data(|app: &mut App| { return app.mode.to_owned()   });

        match screen.unwrap() 
        {
            Screen::Home => return,
            other => {}           ,
        }

        match mode.unwrap()
        {
            Mode::Normal => 
            {
                s.pop_layer();
                s.with_user_data(|app: &mut App| app.mode = Mode::Insert);
            }                                                                ,
            Mode::Insert => {}                                               ,
        }
    });

    siv.add_global_callback('H', |s| {
        s.pop_layer().unwrap();
        home_page(s);
    });
}

fn submit_answer(s: &mut Cursive, answer: &str) 
{
    let current_card = s.with_user_data(|app: &mut App| app.current_card.to_owned()).unwrap().unwrap();

    // If answer is correct
    if answer == current_card.get_back() 
    {
        let difficulty_window = get_difficulty_window(s);
        s.add_layer(difficulty_window);

        s.call_on_name("difficulty", |view: &mut SelectView<Difficulty>| {
            view.set_on_submit(submit_correct_answer);
        });

    } 
    // If answer is incorrect
    else 
    {
        let mut new_card   = current_card.to_owned();
        let next_show_date = Local::now() + Duration::minutes(1);

        new_card.set_status(CardStatus::Review);
        new_card.set_next_show_date(next_show_date);
        new_card.set_last_show_date(Local::now());
        new_card.set_times_correct(0);
        new_card.set_difficulty(Difficulty::Wrong);

        let mut current_deck = s.with_user_data(|app: &mut App| app.current_deck.to_owned()).unwrap().unwrap();
        let storage          = DbHandler::new("./test");
        let mut decks        = s.with_user_data(|app: &mut App| app.decks.to_owned()).unwrap();

        current_deck.update_card(&new_card).unwrap();
        current_deck.set_review();
        current_deck.set_unseen();
        decks.update_deck(&current_deck);
        storage.save(&decks);

        s.with_user_data(|app: &mut App| app.current_card = Some(new_card));
        s.with_user_data(|app: &mut App| app.current_deck = Some(current_deck));
        s.with_user_data(|app: &mut App| app.db = DbHandler::new("./test"));
        s.with_user_data(|app: &mut App| app.decks = decks);
        s.with_user_data(|app: &mut App| app.review_system.to_owned().unwrap().generate_study_deck());

    }

    s.with_user_data(|app: &mut App| app.review_system.to_owned().unwrap().generate_study_deck());
    let current_deck = s.with_user_data(|app: &mut App| app.current_deck.to_owned()).unwrap().unwrap();
    let next_card    = get_current_card(s, &current_deck);

    s.call_on_name("question", |view: &mut TextView| {
        view.set_content(next_card.to_owned().unwrap().get_front());
    });
    s.call_on_name("answer", |view: &mut EditView| {
        view.set_content("");
    });
}

fn submit_correct_answer(siv: &mut Cursive, difficulty: &Difficulty)
{
        siv.pop_layer();
        let current_card   = siv.with_user_data(|app: &mut App| app.current_card.to_owned()).unwrap().unwrap();
        let mut new_card   = current_card.to_owned();
        let times_correct  = new_card.get_times_correct() +1;
        let mut multiplier = times_correct.clone() as i64;

        // TODO: This 2 should be dynamic an come from a config file
        if new_card.get_times_correct() >= 2
        {
            multiplier         = (times_correct - 2) as i64;
            let next_show_date = new_card.get_last_show_date() + Duration::days(multiplier);
            new_card.set_next_show_date(next_show_date);
        }
        else 
        {
            let next_show_date = Local::now() + (Duration::minutes(2));
            new_card.set_next_show_date(next_show_date);
        }

        new_card.set_difficulty(difficulty.to_owned());
        new_card.set_status(CardStatus::Review);
        new_card.set_last_show_date(Local::now());
        new_card.set_times_correct(times_correct);
        new_card.set_status(CardStatus::Review);

        let mut current_deck = siv.with_user_data(|app: &mut App| app.current_deck.to_owned()).unwrap().unwrap();
        let storage          = DbHandler::new("./test");
        let mut decks        = siv.with_user_data(|app: &mut App| app.decks.to_owned()).unwrap();

        current_deck.update_card(&new_card).unwrap();
        current_deck.set_review();
        current_deck.set_unseen();

        decks.update_deck(&current_deck);
        storage.save(&decks);


        siv.with_user_data(|app: &mut App| app.current_deck = Some(current_deck));
        // s.with_user_data(|app: &mut App| app.db = DbHandler::new("./test"));
        siv.with_user_data(|app: &mut App| app.db = storage);
        siv.with_user_data(|app: &mut App| app.decks = decks);
        siv.with_user_data(|app: &mut App| app.review_system.to_owned().unwrap().generate_study_deck());

}
